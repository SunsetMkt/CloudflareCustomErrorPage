<head>
  <meta charset="utf-8" />
  <meta
    name="viewport"
    content="width=device-width, initial-scale=1, maximum-scale=1"
  />
  <meta name="renderer" content="webkit" />
  <meta name="force-rendering" content="webkit" />
  <meta name="backend-renderer" content="ejs" />
  <meta name="custom-page" content="186526/CloudflareCustomErrorPage" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
  <link rel="preconnect" href="https://fonts.gstatic.com" />
  <link
    href="https://fonts.googleapis.com/css2?family=Red+Hat+Display:wght@500&family=Fira+Mono&family=Ubuntu&display=swap"
    rel="stylesheet"
  />
  <title data-i18n="pageText.<%= config.textKey %>">
    <%= config.statusCode %> | <%= allI18n['en-US'].pageText[config.textKey] %>
  </title>
  <link
    href="https://fonts.googleapis.com/icon?family=Material+Icons+Outlined"
    rel="stylesheet"
  />
  <link href="index.css" rel="stylesheet" />
  <script>
    // Multi-language client-side i18n support
    window.allI18n = <%- JSON.stringify(allI18n) %>;
    window.currentLang = 'en'; // Default to English

    // Detect browser language
    function detectLanguage() {
      const browserLang = navigator.language || navigator.userLanguage;
      const supportedLangs = Object.keys(window.allI18n);

      // Try exact match first
      if (supportedLangs.includes(browserLang)) {
        return browserLang;
      }

      // Try language code without region (e.g., 'zh' from 'zh-CN')
      const langCode = browserLang.split('-')[0];
      for (const lang of supportedLangs) {
        if (lang.startsWith(langCode)) {
          return lang;
        }
      }

      // Default to English
      return 'en';
    }

    // Set current language
    window.currentLang = detectLanguage();
    window.i18n = window.allI18n[window.currentLang];

    // Enhanced translation function
    window.t = function(key, defaultValue) {
      const keys = key.split('.');
      let value = window.i18n;
      for (const k of keys) {
        if (value && typeof value === 'object' && k in value) {
          value = value[k];
        } else {
          return defaultValue || key;
        }
      }
      return value || defaultValue || key;
    };

    // Apply translations on page load
    window.addEventListener('DOMContentLoaded', function() {
      // Update HTML lang attribute
      document.documentElement.lang = window.currentLang;

      // Translate elements with data-i18n attribute
      document.querySelectorAll('[data-i18n]').forEach(function(element) {
        const key = element.getAttribute('data-i18n');
        // Use English i18n as default instead of data-i18n-default
        const defaultValue = window.t(key, element.textContent);
        element.innerHTML = window.t(key, defaultValue);
      });

      // Update title if it has translation data
      const titleElement = document.querySelector('title');
      if (titleElement && titleElement.getAttribute('data-i18n')) {
        const titleKey = titleElement.getAttribute('data-i18n');
        const titleDefault = window.t(titleKey, titleElement.textContent);
        titleElement.textContent = `<%= config.statusCode %> | ${window.t(titleKey, titleDefault)}`;
      }

      // cf-error-details
      const baseDetils = document.querySelector(".cf-error-details");
      if (!baseDetils) {
        return;
      }
      const ErrorMessage = baseDetils.querySelector("h1").innerText;
      const Explain = baseDetils.querySelector("p").innerText;
      let ErrorNumber = document.querySelector("header main").innerText;
      baseDetils.querySelector("ul").childNodes.forEach((e) => {
        if (e.innerText !== undefined) {
          let check = e.innerText.replace("Error reference number: ", "");
          if (check !== e.innerText) {
            ErrorNumber = check;
            return;
          }
        }
      });
      document.querySelector("header main").innerText = ErrorNumber;
      document.querySelector("header description").innerText = ErrorMessage;
      document.querySelector("explain p").innerText = Explain;
      document.querySelector("title").innerText =
        `${ErrorNumber} | ${ErrorMessage}`;
    });
  </script>
  <script defer>
    document.head.innerHTML += `<link href="https://fonts.googleapis.com/css2?family=Noto+Sans+SC&display=swap" rel="stylesheet">`;
  </script>
</head>
